// Generated by CoffeeScript 1.9.1
var ADDR_SPACE, FIFO, FIFOBtnEventFunc, INSTRUCTS_TOTAL, LFU, LFUBtnEventFunc, LRU, LRUBtnEventFunc, MEMORY_BLOCK_MAX, PAGE_STORE_MAX, algCount, autoPushEventFunc, changeSettingsBtnEventFunc, checkPage, getPageByAddress, global, init, initHTML, insArr, loadInstruction, loadPage, main, memPage, pushEventFunc, pushInstruction, update;

MEMORY_BLOCK_MAX = 4;

PAGE_STORE_MAX = 10;

INSTRUCTS_TOTAL = 320;

ADDR_SPACE = INSTRUCTS_TOTAL / PAGE_STORE_MAX;

insArr = [];

memPage = [];

global = {
  insM: 0,
  jumpType: 0,
  algorithmUsing: FIFO,
  needUpdateInstructionQueue: true,
  needUpdateMemoryPages: true,
  popPage: null,
  usingPageIndex: -1,
  autoplayIntervalId: -1,
  insLoadTotal: 0,
  pageNotFoundTime: 0,
  currentIns: -1
};

algCount = {
  blockLastVisited: [],
  pageVisitedTime: []
};

init = function(memBlockMax, pageStoreMax, insTotal) {
  var eachBlockSize, fn, i, iter, j, k, l, ref, ref1, ref2;
  if (memBlockMax == null) {
    memBlockMax = 4;
  }
  if (pageStoreMax == null) {
    pageStoreMax = 10;
  }
  if (insTotal == null) {
    insTotal = 320;
  }
  MEMORY_BLOCK_MAX = memBlockMax;
  PAGE_STORE_MAX = pageStoreMax;
  INSTRUCTS_TOTAL = insTotal;
  ADDR_SPACE = INSTRUCTS_TOTAL / PAGE_STORE_MAX;
  insArr = [];
  algCount.blockLastVisited = [];
  algCount.pageVisitedTime = [];
  for (iter = i = 1, ref = MEMORY_BLOCK_MAX; 1 <= ref ? i <= ref : i >= ref; iter = 1 <= ref ? ++i : --i) {
    algCount.blockLastVisited.push(9999);
  }
  for (iter = j = 0, ref1 = ADDR_SPACE; 0 <= ref1 ? j <= ref1 : j >= ref1; iter = 0 <= ref1 ? ++j : --j) {
    algCount.pageVisitedTime.push(0);
  }
  for (iter = k = 0; k <= 9; iter = ++k) {
    pushInstruction();
  }
  memPage = [];
  fn = function() {
    return memPage.push(null);
  };
  for (eachBlockSize = l = 1, ref2 = MEMORY_BLOCK_MAX; 1 <= ref2 ? l <= ref2 : l >= ref2; eachBlockSize = 1 <= ref2 ? ++l : --l) {
    fn();
  }
  return true;
};

pushInstruction = function() {
  if (global.jumpType === 0 || global.jumpType === 2) {
    insArr.push(global.insM);
    global.insM += 1;
    return global.jumpType = global.jumpType + 1;
  } else if (global.jumpType === 1) {
    global.insM = global.insM + Math.floor(Math.random() * (INSTRUCTS_TOTAL - global.insM));
    insArr.push(global.insM);
    global.jumpType = 2;
    return global.insM += 1;
  } else if (global.jumpType === 3) {
    global.insM = Math.floor(Math.random() * global.insM);
    insArr.push(global.insM);
    global.jumpType = 0;
    return global.insM += 1;
  }
};

initHTML = function() {
  var each, i, ref;
  for (each = i = 1, ref = MEMORY_BLOCK_MAX; 1 <= ref ? i <= ref : i >= ref; each = 1 <= ref ? ++i : --i) {
    $('.memory-div').append('<div class="memory-block"></div>');
  }
  return $('.memory-block').css('height', (450 / MEMORY_BLOCK_MAX) + 'px');
};

loadInstruction = function() {
  global.insLoadTotal += 1;
  global.currentIns = insArr.shift();
  return pushInstruction();
};

loadPage = function(pageNum, pageOut, exchangeWhich) {
  var ret;
  ret = memPage[exchangeWhich];
  memPage[exchangeWhich] = pageNum;
  return ret;
};

checkPage = function(insAddr) {
  var i, len, page, ret;
  ret = false;
  for (i = 0, len = memPage.length; i < len; i++) {
    page = memPage[i];
    algCount.blockLastVisited[memPage.indexOf(page)] += 1;
    if ((page !== null) && ((getPageByAddress(insAddr)) === page)) {
      algCount.blockLastVisited[memPage.indexOf(page)] = 0;
      algCount.pageVisitedTime[page] += 1;
      ret = true;
    }
  }
  return ret;
};

getPageByAddress = function(addr) {
  return Math.floor(addr / PAGE_STORE_MAX);
};

update = function() {
  var i, index, j, ref;
  if (global.needUpdateInstructionQueue) {
    $('.instruction-queue').empty();
    $('.instruction-queue').append('<div class="instruction hightlight-blue">' + (global.currentIns >= 0 ? global.currentIns.toString() : ' ') + '</div>');
    for (index = i = 0; i <= 9; index = ++i) {
      $('.instruction-queue').append('<div class="instruction">' + insArr[index] + '</div>');
    }
    global.needUpdateInstructionQueue = false;
  }
  if (global.needUpdateMemoryPages) {
    $('.memory-div').empty();
    for (index = j = 0, ref = MEMORY_BLOCK_MAX - 1; 0 <= ref ? j <= ref : j >= ref; index = 0 <= ref ? ++j : --j) {
      if (memPage[index] !== null) {
        $('.memory-div').append('<div class="memory-block" id="mempage-' + index.toString() + '">' + 'Page #' + memPage[index] + '<br />Address: ' + (memPage[index] * PAGE_STORE_MAX) + ' ~ ' + (memPage[index] * PAGE_STORE_MAX + PAGE_STORE_MAX - 1) + '<br />Last visit: ' + algCount.blockLastVisited[index] + '<br />Page visited: ' + algCount.pageVisitedTime[memPage[index]] + '</div>');
      } else {
        $('.memory-div').append('<div class="memory-block">idle block</div>');
      }
    }
    $('.memory-block').css('height', (450 / MEMORY_BLOCK_MAX) + 'px');
    if (global.usingPageIndex !== -1) {
      $('#mempage-' + global.usingPageIndex).addClass('hightlight-blue');
    }
    global.needUpdateMemoryPages = false;
  }
  if (global.insLoadTotal === 0) {
    $('#instruct-total').text('0');
    return $('#page-not-found-rate').text('0%');
  } else {
    $('#instruct-total').text(global.insLoadTotal.toString());
    return $('#page-not-found-rate').text((global.pageNotFoundTime * 100 / global.insLoadTotal).toString() + '%');
  }
};

pushEventFunc = function(ev) {
  if ((checkPage(insArr[0])) === true) {
    global.usingPageIndex = memPage.indexOf(getPageByAddress(insArr[0]));
    loadInstruction();
    global.needUpdateMemoryPages = true;
    global.needUpdateInstructionQueue = true;
    return;
  }
  global.pageNotFoundTime += 1;
  global.algorithmUsing(getPageByAddress(insArr[0]));
  global.needUpdateMemoryPages = true;
  return global.needUpdateInstructionQueue = true;
};

autoPushEventFunc = function(ev) {
  if (global.autoplayIntervalId === -1) {
    global.autoplayIntervalId = setInterval(pushEventFunc, 100);
    $('#btn-auto-push-next-ins').text('Pause');
    return $('#btn-auto-push-next-ins').addClass('mui-btn-danger');
  } else {
    clearInterval(global.autoplayIntervalId);
    global.autoplayIntervalId = -1;
    $('#btn-auto-push-next-ins').text('Auto push');
    return $('#btn-auto-push-next-ins').removeClass('mui-btn-danger');
  }
};

FIFOBtnEventFunc = function(ev) {
  $('#btn-change-alg-FIFO').addClass('mui-btn-primary');
  $('#btn-change-alg-LRU').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  $('#btn-change-alg-LFU').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  global.algorithmUsing = FIFO;
  return console.log('Algorithm changed to FIFO');
};

LRUBtnEventFunc = function(ev) {
  $('#btn-change-alg-FIFO').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  $('#btn-change-alg-LRU').addClass('mui-btn-primary');
  $('#btn-change-alg-LFU').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  global.algorithmUsing = LRU;
  return console.log('Algorithm changed to LRU');
};

LFUBtnEventFunc = function(ev) {
  $('#btn-change-alg-FIFO').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  $('#btn-change-alg-LRU').removeClass('mui-btn-primary').addClass('mui-btn-defaut');
  $('#btn-change-alg-LFU').addClass('mui-btn-primary');
  global.algorithmUsing = LFU;
  return console.log('Algorithm changed to LFU');
};

changeSettingsBtnEventFunc = function(ev) {
  var instructionPerPage, instructionTotal, memBlockSize;
  MEMORY_BLOCK_MAX = memBlockSize = parseInt($('#input-memory-block-num').val() || 4);
  PAGE_STORE_MAX = instructionPerPage = parseInt($('#input-instruction-per-page').val() || 10);
  INSTRUCTS_TOTAL = instructionTotal = parseInt($('#input-instruction-total').val() || 320);
  if (global.autoplayIntervalId !== -1) {
    clearInterval(global.autoplayIntervalId);
    global.autoplayIntervalId = -1;
    $('#btn-auto-push-next-ins').text('Auto push');
    $('#btn-auto-push-next-ins').removeClass('mui-btn-danger');
  }
  global = {
    insM: 0,
    jumpType: 0,
    algorithmUsing: FIFO,
    needUpdateInstructionQueue: true,
    needUpdateMemoryPages: true,
    popPage: null,
    usingPageIndex: -1,
    autoplayIntervalId: -1,
    insLoadTotal: 0,
    pageNotFoundTime: 0,
    currentIns: -1
  };
  algCount = {
    blockLastVisited: [],
    pageVisitedTime: []
  };
  $('.memory-div').empty();
  $('.instruction-queue').empty();
  init(memBlockSize, instructionPerPage, instructionTotal);
  initHTML();
  console.log('Initialize done!');
  return true;
  console.log('Program starts!');
  init();
  initHTML();
  setInterval(update, 50);
  return console.log('Initialize done!');
};

FIFO = function(pageInsert) {
  loadInstruction();
  global.popPage = memPage.shift();
  algCount.blockLastVisited.shift();
  memPage.push(pageInsert);
  algCount.blockLastVisited.push(0);
  algCount.pageVisitedTime[pageInsert] += 1;
  global.needUpdateMemoryPages = true;
  return global.usingPageIndex = memPage.length - 1;
};

LRU = function(pageInsert) {
  var i, index, longestLastVisit, popIndex, ref;
  loadInstruction();
  popIndex = -1;
  longestLastVisit = 0;
  for (index = i = 0, ref = MEMORY_BLOCK_MAX - 1; 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
    if (algCount.blockLastVisited[index] >= longestLastVisit) {
      longestLastVisit = algCount.blockLastVisited[index];
      popIndex = index;
    }
  }
  console.log(popIndex);
  memPage[popIndex] = pageInsert;
  algCount.blockLastVisited[popIndex] = 0;
  algCount.pageVisitedTime[pageInsert] += 1;
  global.needUpdateMemoryPages = true;
  return global.usingPageIndex = popIndex;
};

LFU = function(pageInsert) {
  var i, index, j, leastUsedTime, popIndex, ref, ref1;
  loadInstruction();
  popIndex = -1;
  leastUsedTime = 0x7fff;
  for (index = i = 0, ref = MEMORY_BLOCK_MAX - 1; 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
    if (memPage[index] === null) {
      popIndex = index;
      memPage[popIndex] = pageInsert;
      algCount.blockLastVisited[popIndex] = 0;
      algCount.pageVisitedTime[pageInsert] += 1;
      global.needUpdateMemoryPages = true;
      global.usingPageIndex = popIndex;
      return;
    }
  }
  for (index = j = 0, ref1 = MEMORY_BLOCK_MAX - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; index = 0 <= ref1 ? ++j : --j) {
    if (algCount.pageVisitedTime[memPage[index]] <= leastUsedTime) {
      leastUsedTime = algCount.pageVisitedTime[index];
      popIndex = index;
    }
  }
  console.log(popIndex);
  memPage[popIndex] = pageInsert;
  algCount.blockLastVisited[popIndex] = 0;
  algCount.pageVisitedTime[pageInsert] += 1;
  global.needUpdateMemoryPages = true;
  return global.usingPageIndex = popIndex;
};

main = function() {
  console.log('Program starts!');
  init();
  initHTML();
  setInterval(update, 16);
  console.log('Initialize done!');
  global.algorithmUsing = FIFO;
  $('#btn-push-next-ins').click(pushEventFunc);
  $('#btn-auto-push-next-ins').click(autoPushEventFunc);
  $('#btn-change-alg-FIFO').click(FIFOBtnEventFunc);
  $('#btn-change-alg-LRU').click(LRUBtnEventFunc);
  $('#btn-change-alg-LFU').click(LFUBtnEventFunc);
  $('#btn-submit-change').click(changeSettingsBtnEventFunc);
  return true;
};

main();

//# sourceMappingURL=memory.js.map
